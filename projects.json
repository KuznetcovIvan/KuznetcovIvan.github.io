[
  {
    "title": "API веб-платформы для хранения, создания и обмена кулинарными рецептами",
    "description": "Реализовал создание и редактирование рецептов с вложенными ингредиентами и тегами, добавление в избранное и список покупок, подписку на авторов, скачивание списка ингредиентов с автоматическим суммированием. API интерфейс поддерживает пагинацию, JWT-аутентификацию и расширенное управление данными через админ-панель. Выполнил контейнеризацию полного стека проекта: бэкенд, фронтенд, Nginx и базу данных PostgreSQL. Настроил Docker-образы и volume-тома для хранения статики, медиафайлов и данных БД. Организовал CI/CD через GitHub Actions: сборка и публикация образов на Docker Hub, деплой на сервер с применением миграций и сборкой статики. Реализовал уведомления в Telegram о статусе деплоя.",
    "techStack": [
      "Python",
      "Django",
      "Django REST Framework",
      "Djoser", "PostgreSQL",
      "Gunicorn",
      "React",
      "Docker",
      "Docker Compose",
      "Nginx",
      "GitHub Actions",
      "Docker Hub",
      "Telegram Bot API"
    ],
    "link": "https://github.com/KuznetcovIvan/foodgram"
  },
  {
    "title": "Командный проект (3 человека): API базы данных произведений (фильмов, книг, музыки) с возможностью оставлять отзывы и оценки",
    "description": "В проекте выступал тимлидом: координировал действия команды, декомпозировал задачи, занимался пользовательской системой. Реализовал регистрацию по email и username, аутентификацию через JWT-токен после подтверждения кода по email, а также разграничение ролей: аноним, пользователь, модератор, администратор.",
    "techStack": [
      "Python",
      "Django",
      "Django REST Framework",
      "Simple JWT"
    ],
    "link": "https://github.com/KuznetcovIvan/api_yamdb"
  },
  {
    "title": "Сервис для публикации личных дневников",
    "description": "Реализовал: создание, редактирование и удаление постов, категорий, местоположений и комментариев; добавление изображений; поддержку отложенных публикаций; авторизацию и разграничение прав доступа; пагинацию и фильтрацию опубликованных постов. Настроил админ-панель для управления контентом.",
    "techStack": [
      "Python",
      "Django",
      "Bootstrap"
    ],
    "link": "https://github.com/KuznetcovIvan/django_sprint4"
  },
  {
    "title": "Сервис сокращения ссылок",
    "description": "Реализовал: генерацию уникальных коротких ссылок из длинных URL; возможность указать собственный короткий идентификатор; автоматическую генерацию идентификатора при отсутствии пользовательского; переадресацию по короткой ссылке на исходный URL; простой веб-интерфейс с формой для создания ссылок; полноценное REST API для создания и получения ссылок.",
    "techStack": [
      "Python",
      "Flask",
      "SQLAlchemy",
      "Jinja2",
      "Alembic"
    ],
    "link": "https://github.com/KuznetcovIvan/yacut"
  },
  {
    "title": "API блога для интеграции с мобильным приложением, чат-ботом и веб-интерфейсом",
    "description": "Реализовал создание, редактирование и удаление постов, отправку комментариев, подписку на других пользователей и просмотр своих подписок, получение информации о сообществах. Сервис поддерживает JWT-аутентификацию, пагинацию и автогенерацию документации через Redoc.",
    "techStack": [
      "Python",
      "Django",
      "Django REST Framework",
      "Djoser"
    ],
    "link": "https://github.com/KuznetcovIvan/api_final_yatube"
  },
  {
    "title": "Парсер документации Python",
    "description": "Реализовал управление через аргументы командной строки и логирование, извлечение информации о новых возможностях в последних версиях Python, сбор сведений о версиях и их статусах, скачивание архива с документацией Python, анализ статусов PEP. Использовал библиотеки Requests_cache и BeautifulSoup. Позже переработал проект с использованием фреймворка Scrapy.",
    "techStack": [
      "Python",
      "Requests_cache",
      "BeautifulSoup",
      "Scrapy"
    ],
    "link": "https://github.com/KuznetcovIvan/scrapy_parser_pep"
  },
  {
    "title": "Telegram-бот для отслеживания статуса",
    "description": "Разработал Telegram-бота, который опрашивает API сервиса с заданной периодичностью, проверяет статус и отправляет уведомления в Telegram. Реализовал проверку переменных окружения, обработку ответов API, логирование событий в stdout и файл. Ошибки API и недокументированные статусы обрабатываются с отправкой уведомлений в Telegram.",
    "techStack": [
      "Python",
      "python-telegram-bot",
      "requests",
      "logging"
    ],
    "link": "https://github.com/KuznetcovIvan/homework_bot"
  },
  {
    "title": "Бот для интерактивного помощника BongoCat",
    "description": "Реализовал автоматический клик в заданной точке с заданным интервалом времени, калибровку позиции клика с сохранением, устойчивость к перемещению окна (привязка к рабочему окну), запуск через аргументы командной строки, логирование действий, опциональное звуковое сопровождение, изменение значений кликов по указателям в памяти.",
    "techStack": [
      "Python",
      "Pyautogui",
      "Pymem",
      "Pynput",
      "Pywinauto"
    ],
    "link": "https://github.com/KuznetcovIvan/bongo_bot"
  },
  {
    "title": "Тестирование Django проектов YaNote и YaNews",
    "description": "Собрал коллекцию тестов на unittest и pytest для проверки ключевых сценариев работы проектов YaNote и YaNews. В YaNote реализовал: тесты доступности маршрутов для анонимных и авторизованных пользователей; проверку передачи объектов в шаблоны и контекст; логику создания, редактирования и удаления заметок с проверкой авторства и генерации slug. В YaNews — тесты на доступность страниц, отображение новостей и комментариев, сортировку и ограничения по количеству, а также валидацию запрещённых слов в комментариях.",
    "techStack": [
      "Python",
      "Unittest",
      "Pytest",
      "Django",
      "Pytest-django"
    ],
    "link": "https://github.com/KuznetcovIvan/django_testing"
  },
  {
  "title": "Веб-страница-портфолио",
  "description": "Разработал адаптивную веб-страницу для демонстрации проектов. Реализовал переключение тем (светлая/тёмная), поддержку мультиязычности (русский/английский) с автоматическим переводом через googletrans использовав GitHub Actions, загрузку проектов из JSON, динамическое создание карточек проектов с кликабельными ссылками на GitHub.",
  "techStack": [
    "HTML",
    "CSS",
    "JavaScript",
    "Python",
    "Googletrans",
    "GitHub Actions"
  ],
  "link": "https://github.com/KuznetcovIvan/KuznetcovIvan.github.io"
  },
  {
    "title": "Змейка",
    "description": "Реализовал классическую игру 'Змейка' с использованием Pygame и ООП. Добавил механики: обычные яблоки увеличивают длину, плохие уменьшают, отравленные сбрасывают игру. Управление скоростью через Shift/Ctrl, сквозное поле, сброс при столкновении с собой.",
    "techStack": [
      "Python",
      "Pygame"
    ],
    "link": "https://github.com/KuznetcovIvan/the_snake"
  }
]